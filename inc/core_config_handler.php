<?php

function Load_Configs()
{
	chdir(dirname(__FILE__) . "/..");// chdir("..");
	
//	echo "CWD: ".getcwd()."<BR>";
	$config_database_file_path = "config/config_database.php";
	$config_settings_file_path = "config/config_settings.php";
	
	$copy_stx = array_key_exists('copy_stx', $_POST) ? $_POST['copy_stx'] : NULL;
	
	
	$read_config_database_ok = read_ini_file($config_database_file_path, $GLOBALS['config_db']);
	if($read_config_database_ok === 1)
	{
		//$config_success .= "DATABASE CONFIG READ OK<BR>";
		
		// Create abbreviated variables for cleaner & easier code
		// 'config_db's variable names are generated by the config files, which are intended to be easy for the end user to understand
		$GLOBALS['db']['s_host']=$GLOBALS['config_db']['db_source']['host'];
		$GLOBALS['db']['s_base']=$GLOBALS['config_db']['db_source']['base'];
		$GLOBALS['db']['s_user']=$GLOBALS['config_db']['db_source']['user'];
		$GLOBALS['db']['s_pass']=$GLOBALS['config_db']['db_source']['pass'];
		$GLOBALS['db']['s_prefix']=$GLOBALS['config_db']['db_source']['prefix'];
		$GLOBALS['db']['table_players']= "`" . DB_Type_PlayersTable($GLOBALS['config_db']['db_config']['db_module_type']) . "`";
	
		$GLOBALS['db']['x_host']=$GLOBALS['config_db']['db_xray']['host'];
		$GLOBALS['db']['x_base']=$GLOBALS['config_db']['db_xray']['base'];
		$GLOBALS['db']['x_user']=$GLOBALS['config_db']['db_xray']['user'];
		$GLOBALS['db']['x_pass']=$GLOBALS['config_db']['db_xray']['pass'];
		$GLOBALS['db']['x_prefix']=$GLOBALS['config_db']['db_xray']['prefix'];
		
		$GLOBALS['db']['same'] = FixInput_Bool($GLOBALS['config_db']['db_config']['db_use_same']);
		$GLOBALS['db']['type'] = $GLOBALS['config_db']['db_config']['db_module_type'];
		$GLOBALS['db']['players'] = $GLOBALS['db']['s_prefix'] . DB_Type_PlayersTable($GLOBALS['db']['type']);
	}
	else
	{
		$show_process = true;
		echo "ERROR: Could not load database config file.<BR>($config_database_file_path)<BR>";
	}
	
	$read_config_settings_ok = read_ini_file($config_settings_file_path, $GLOBALS['config_settings']);

	$GLOBALS['config'] = $GLOBALS['config_settings'];
	if($read_config_settings_ok === 1)
	{
		$GLOBALS['config']['settings']['first_setup'] = FixOutput_Bool($GLOBALS['config_settings']['settings']['first_setup'], true, false, true);
	}
	else
	{
		$show_process = true;
		echo "ERROR: Could not load settings config file.<BR>($config_settings_file_path)<BR>";
	}
	
	$db1_ok = Check_DB_Exists(true, $GLOBALS['db']['type'],
		$GLOBALS['db']['s_host'], $GLOBALS['db']['s_base'], $GLOBALS['db']['s_user'], $GLOBALS['db']['s_pass'], $GLOBALS['db']['s_prefix']);
	if(!$db1_ok){ echo "ERROR: There was an error validating the Source Database: [". $GLOBALS['db']['s_base']."]<BR>"; }

	if($copy_stx)
	{
		$db2_ok = Check_DB_Exists(false, "",
			$GLOBALS['db']['x_host'], $GLOBALS['db']['x_base'], $GLOBALS['db']['x_user'], $GLOBALS['db']['x_pass'], $GLOBALS['db']['x_prefix']);
		if(!$db2_ok){ echo "ERROR: There was an error validating the X-Ray Database: [". $GLOBALS['db']['x_base']."]<BR>"; }
	}
	else
	{
		$db2_ok = $db1_ok;
		$GLOBALS['db']['x_host']=$GLOBALS['db']['s_host'];
		$GLOBALS['db']['x_base']=$GLOBALS['db']['s_base'];
		$GLOBALS['db']['x_user']=$GLOBALS['db']['s_user'];
		$GLOBALS['db']['x_pass']=$GLOBALS['db']['s_pass'];
		$GLOBALS['db']['x_prefix']=$GLOBALS['db']['s_prefix'];
	}
	
	return $read_config_database_ok && $read_config_settings_ok && $db1_ok && $db2_ok;
	
}

function Save_Config_DB()
{
	$config_settings_file_path = "config/config_settings.php";
	$config_database_file_path = "config/config_database.php";
	
	$GLOBALS['config_db']['db_config']['db_use_same'] = FixOutput_Bool($GLOBALS['config_db']['db_config']['db_use_same'],"yes","no");
	
	return write_ini_file($config_database_file_path, $GLOBALS['config_db']);
	
}

function Save_Config_Settings()
{
	$config_settings_file_path = "config/config_settings.php";
	$config_database_file_path = "config/config_database.php";
	
	return write_ini_file($config_settings_file_path, $GLOBALS['config_settings']);
	
}

function read_ini_file($f, &$r)
{
	$null = "";
	$r=$null;
	$first_char = "";
	$sec=$null;
	$comment_chars=";#";
	$num_comments = "0";
	$num_newline = "0";
	
	if($f!="" && file_exists($f) )
	{
	
		//Read to end of file with the newlines still attached into $f
		$f = @file($f);
		if ($f === false) {
			return -2;
		}
		// Process all lines from 0 to count($f)
		for ($i=0; $i<@count($f); $i++)
		{
			$w=@trim($f[$i]);
			$first_char = @substr($w,0,1);
			if ($w)
			{
				if ((@substr($w,0,1)=="[") and (@substr($w,-1,1))=="]") {
					$sec=@substr($w,1,@strlen($w)-2);
					$num_comments = 0;
					$num_newline = 0;
				}
				else if ((stristr($comment_chars, $first_char) == true)) {
					$r[$sec]["Comment_".$num_comments]=$w;
					$num_comments = $num_comments +1;
				}               
				else {
					// Look for the = char to allow us to split the section into key and value
					$w=@explode("=",$w);
					$k=@trim($w[0]);
					unset($w[0]);
					$v=@trim(@implode("=",$w));
					// look for the new lines
					if ((@substr($v,0,1)=="\"") and (@substr($v,-1,1)=="\"")) {
						$v=@substr($v,1,@strlen($v)-2);
					}
				   
					$r[$sec][$k]=$v;
				   
				}
			}
			else {
				$r[$sec]["Newline_".$num_newline]=$w;
				$num_newline = $num_newline +1;
			}
		}
		return 1;
	} else { return -2; };
}

function write_ini_file($path, $assoc_arr) {
	$content = "";
	if($path != "" && is_array($assoc_arr) && file_exists($path) )
	{
	
		foreach ($assoc_arr as $key=>$elem) {
			if (is_array($elem)) {
				if ($key != '') {
					$content .= "[".$key."]\r\n";                   
				}
			   
				foreach ($elem as $key2=>$elem2) {
					if (beginsWith($key2,'Comment_') == 1 && beginsWith($elem2,';')) {
						$content .= $elem2."\r\n";
					}
					else if (beginsWith($key2,'Newline_') == 1 && ($elem2 == '')) {
						$content .= $elem2."\r\n";
					}
					else {
						$content .= $key2." = ".$elem2."\r\n";
					}
				}
			}
			else {
				$content .= $key." = ".$elem."\r\n";
			}
		}
		
		if (!$handle = fopen($path, 'w')) {
			return -2;
		}
		if (!fwrite($handle, $content)) {
			return -2;
		}
		fclose($handle);
		return 1;
	} else { return -2; }
}

function is__writeable($path)
{	
	clearstatcache(true,$path);
	if ($path{strlen($path)-1}=='/')
		return is__writeable($path.uniqid(mt_rand()).'.tmp');
	
	if (file_exists($path)) {
		if (!($f = @fopen($path, 'r+')))
			return false;
		fclose($f);
		return true;
	}
	
	if (!($f = @fopen($path, 'w')))
		return false;
	fclose($f);
	unlink($path);
	return true;
}

function beginsWith( $str, $sub ) {
	return ( substr( $str, 0, strlen( $sub ) ) === $sub );
}
?>